"""
Django settings for Django Inventory project.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os

##Settings include:
##Custom settings file for inventory
SECRET_KEY = '{{ .Env.SECRET_KEY }}'
##Settings for email. Local postfix should be bundled.
EMAIL_HOST = '{{ .Env.EMAIL_HOST }}'
EMAIL_PORT = {{ .Env.EMAIL_PORT }}
EMAIL_USE_TLS = {{ .Env.EMAIL_USE_TLS }}
DEFAULT_FROM_EMAIL = '{{ .Env.DEFAULT_FROM_EMAIL }}'
##Set to true so we get useful error messages in browser. Not generally recommended for production public sites.
DEBUG = {{ .Env.DEBUG }}
#URLS the site will run as.
ALLOWED_HOSTS={{ .Env.ALLOWED_HOSTS }}
CSRF_TRUSTED_ORIGINS={{ .Env.CSRF_TRUSTED_ORIGINS }}
RICHTEMPLATES_DEFAULT_SKIN = '{{ .Env.RICHTEMPLATES_DEFAULT_SKIN }}'
DATA_UPLOAD_MAX_NUMBER_FIELDS={{ .Env.DATA_UPLOAD_MAX_NUMBER_FIELDS }}
##Settings for oauth2 login via google.
LOGIN_URL = '{{ .Env.LOGIN_URL }}'
LOGIN_REDIRECT_URL = '{{ .Env.LOGIN_REDIRECT_URL }}'
LOGOUT_REDIRECT_URL = '{{ .Env.LOGOUT_REDIRECT_URL }}'
SOCIAL_AUTH_URL_NAMESPACE = '{{ .Env.SOCIAL_AUTH_URL_NAMESPACE }}'
SOCIAL_AUTH_REDIRECT_IS_HTTPS = {{ .Env.SOCIAL_AUTH_REDIRECT_IS_HTTPS }}
##Oauth server settings
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = '{{ .Env.SOCIAL_AUTH_GOOGLE_OAUTH2_KEY }}'
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = '{{ .Env.SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET }}'
## Database
## https://docs.djangoproject.com/en/3.0/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': '{{ .Env.POSTGRES_DB }}',
        'USER': '{{ .Env.POSTGRES_USER }}',
        'PASSWORD': '{{ .Env.POSTGRES_PASSWORD }}',
        'HOST': '{{ .Env.POSTGRES_HOST }}',
        'PORT': '{{ .Env.POSTGRES_PORT }}',
    }
}
TIME_ZONE = '{{ .Env.TIME_ZONE }}'

STATIC_ROOT = "inventory/static"

#Fixes things so https works in admin
SESSION_COOKIE_SECURE = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')
CSRF_COOKIE_SECURE = True

CELERY_BROKER_URL = os.environ.get("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TASK_TIME_LIMIT = 5 * 60
CELERY_TASK_SOFT_TIME_LIMIT = 5 * 60
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/



# Application definition
AUTHENTICATION_BACKENDS = (
    'social_core.backends.google.GoogleOAuth2',
    'django.contrib.auth.backends.ModelBackend',
)

INSTALLED_APPS = [
    'django_celery_beat',
    'social_django',
    'rest_framework.authtoken',
	'django_tables2',
	'rest_framework',
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'django_filters',
	'private_storage',
    'djinventory',
]
PRIVATE_STORAGE_ROOT = '/inventory/private_storage/'
PRIVATE_STORAGE_AUTH_FUNCTION = 'private_storage.permissions.allow_superuser'
MEDIA_URL = '/'

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES' : ('rest_framework.permissions.IsAuthenticated',)
}

ROOT_URLCONF = 'django_inventory.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
	'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_inventory.wsgi.application'



# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

USE_I18N = True

USE_L10N = True

USE_TZ = True



# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

#STATIC_URL = '/static/'
#STATIC_URL = '/purchases/'
STATIC_URL = '/static/'


#STATICFILES_DIRS = ('purchases/','cpu_images/')
#STATICFILES_DIRS = ('cpu_images/','purchases/','static/')
#STATICFILES_DIRS = (
#	os.path.join(BASE_DIR, "static"),
#	'/var/www/static/',
#)


